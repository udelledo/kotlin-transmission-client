import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.module.kotlin.convertValue
import org.transmission.client.*
import java.math.BigInteger
import java.sql.Timestamp

data class NonNullTorrent(
        val activityDate: Timestamp,
        val addedDate: Timestamp,
        val bandwidthPriority: Long,
        val comment: String,
        val corruptEver: Long,
        val dateCreated: Timestamp,
        val doneDate: Timestamp,
        val downloadDir: String,
        val downloadLimit: Long,
        val downloadLimited: Boolean,
        val error: Long,
        val errorString: String,
        val eta: Long,
        val etaIdle: Int,
        val files: List<File>,
        val fileStats: List<FileStat>,
        val hashString: String,
        val haveUnchecked: Long,
        val haveValid: Long,
        val id: Long,
        val finished: Boolean,
        val private: Boolean,
        val stalled: Boolean,
        val leftUntilDone: Long,
        val magnetLink: String,
        val name: String,
        val percentDone: Long,
        val rateDownload: Long,
        val rateUpload: Long,
        val secondsDownloading: Long,
        val status: Torrent.TorrentStatus,
        val startDate: Timestamp,
        val uploadRatio: Long,
        val downloadedEver: BigInteger,
        val secondsSeeding: BigInteger,
        val desiredAvailable: BigInteger,
        val sizeWhenDone: BigInteger,
        val maxConnectedPeers: BigInteger,
        val torrentFile: String,
        val totalSize: Long,
        @JsonProperty("peer-limit") val peerLimit: Long,
        val metadataPercentComplete: Long,
        val peers: List<Peer>,
        val peersFrom: PeersFrom,
        val manualAnnounceTime: Long,
        val peersConnected: Long,
        val peersGettingFromUs: Long,
        val pieceCount: Long,
        val pieceSize: Long,
        val pieces: String,
        val priorities: List<Long>,
        val trackerStats: List<TrackerStat>,
        val trackers: List<Tracker>,
        val peersSendingToUs: Long,
        val seedIdleLimit: Long,
        val queuePosition: Long,
        val seedIdleMode: Long,
        val seedRatioLimit: Long,
        val seedRatioMode: Long,
        val recheckProgress: Long,
        val uploadedEver: Long,
        val uploadLimit: Long,
        val webseeds: List<String>,
        val webseedsSendingToUs: Long,
        val uploadLimited: Boolean,
        val wanted: List<Long>? = null
)

fun Torrent.toNonNull(): NonNullTorrent {
    return mapper.convertValue(this)
}

data class NonNullSessionInfo(
        val altSpeedDown: Long,
        val altSpeedEnabled: Boolean,
        val altSpeedTimeBegin: Long,
        val altSpeedTimeDay: Long,
        val altSpeedTimeEnabled: Boolean,
        val altSpeedTimeEnd: Long,
        val altSpeedUp: Long,
        val blockListEnabled: Boolean,
        val blockListSize: Long,
        val seedQueueSize: Long,
        val blocklistUrl: String,
        val cacheSizeMb: Long,
        val configDir: String,
        val seedRatioLimited: Boolean,
        val seedRatioLimit: Long,
        val encryption: String,
        val downloadQueueSize: Long,
        val dhtEnabled: Boolean,
        val peerLimitGlobal: Long,
        val peerLimitPerTorrent: Long,
        val peerPort: Int,
        val peerPortRandomOnStart: Boolean,
        val idleSeedingLimit: Long,
        val idleSeedingLimitEnabled: Boolean,
        val downloadDir: String,
        val downloadDirFreeSpace: Long,
        val rpcVersion: Long,
        val rpcVersionMinimum: Long,
        val downloadQueueEnabled: Boolean,
        val incompleteDir: String,
        val incompleteDirEnabled: Boolean,
        val queueStalledEnabled: Boolean,
        val queueStalledMinutes: Long,
        val speedLimitDown: Long,
        val speedLimitDownEnabled: Boolean,
        val speedLimitUp: Long,
        val speedLimitUpEnabled: Boolean,
        val startAddedTorrents: Boolean,
        val trashOriginalTorrentFiles: Boolean,
        val seedQueueEnabled: Boolean,
        val units: Units,
        val version: String,
        val scriptTorrentDoneEnabled: Boolean,
        val scriptTorrentDoneFilename: String,
        val renamePartialFile: Boolean,
        val ldpEnabled: Boolean,
        val pexEnabled: Boolean,
        val utpEnabled: Boolean,
        val portForwardingEnabled: Boolean)

fun SessionInfo.toNonNull(): NonNullSessionInfo {
    return mapper.convertValue(this)
}
